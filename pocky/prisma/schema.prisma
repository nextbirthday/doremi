// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActiveState {
  Yes
  No
}

enum LogType {
  User
  Board
  File
}

model User {
  id            String      @id @default(cuid())
  name          String?
  userid        String?     @unique
  password      String?
  email         String?     @unique
  emailVerified DateTime?
  birth         String?
  mobile        String?
  gender        String?    
  address       String?
  image         String?
  grade         Int         @default(1)
  isDelete      ActiveState @default(No)
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Logs          Log[]
  boards        Board[]
  comments      Comment[] 
  }

model Channel {
  id  Int     @id @default(autoincrement())
  name String
  subscriber Int?
  title String?
  icon String?
  owner String?
  boards Board[]
}

model Board {
  id         Int     @id @default(autoincrement())
  title      String?
  content    String?
  author     User     @relation(fields: [authorId], references: [userid])
  authorId   String   // Foreign key referencing userid in the User table
  views      Int?
  rate       Int?
  tag        String?
  isDelete   ActiveState @default(No)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  comments  Comment[] 
  channelId  Int?       // Foreign key referencing id in the Channel table
  channel    Channel?   @relation(fields: [channelId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [userid])
  authorId  String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Log {
  id       String   @id @default(cuid())
  type     LogType  @default(User)
  info     String
  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
  createAt DateTime @default(now())
}

model Brand {
  id Int     @id @default(autoincrement())
  name String?
  address String?
  businessNumber String?
  products Product[]
  isDelete   ActiveState @default(No)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  code          String      @id @default(cuid())
  name          String?
  price         String?     @unique
  stock         String?     @unique
  image         String?
  isDelete      ActiveState @default(No)
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  brand     Brand?    @relation(fields: [brandId], references: [id])
  brandId   Int
}

